circuit AXIWrapperChiselInsertSort :
  module insertSort :
    input clock : Clock
    input reset : Reset
    output io : { flip array : SInt<32>[80], flip valid : UInt<1>, array_out : SInt<32>[80], ready : UInt<1>}

    reg state : UInt<4>, clock with :
      reset => (reset, UInt<4>("hf")) @[insertSort.scala 13:24]
    node _T = asUInt(reset) @[insertSort.scala 14:22]
    when _T : @[insertSort.scala 14:26]
      state <= UInt<4>("hf") @[insertSort.scala 15:15]
    reg array : SInt<32>[80], clock with :
      reset => (UInt<1>("h0"), array) @[insertSort.scala 17:20]
    node _T_1 = eq(io.valid, UInt<1>("h0")) @[insertSort.scala 18:18]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[insertSort.scala 18:17]
    REG <= _T_1 @[insertSort.scala 18:17]
    when REG : @[insertSort.scala 18:29]
      array <= io.array @[insertSort.scala 19:15]
    io.array_out <= array @[insertSort.scala 21:18]
    reg i : SInt<32>, clock with :
      reset => (UInt<1>("h0"), i) @[insertSort.scala 22:16]
    reg key : SInt<32>, clock with :
      reset => (UInt<1>("h0"), key) @[insertSort.scala 23:18]
    reg j : SInt<32>, clock with :
      reset => (UInt<1>("h0"), j) @[insertSort.scala 24:16]
    node _T_2 = eq(UInt<4>("hf"), state) @[insertSort.scala 26:19]
    when _T_2 : @[insertSort.scala 26:19]
      node _state_T = mux(io.valid, UInt<1>("h0"), state) @[insertSort.scala 28:25]
      state <= _state_T @[insertSort.scala 28:19]
    else :
      node _T_3 = eq(UInt<1>("h0"), state) @[insertSort.scala 26:19]
      when _T_3 : @[insertSort.scala 26:19]
        i <= asSInt(UInt<32>("h1")) @[insertSort.scala 31:15]
        state <= UInt<1>("h1") @[insertSort.scala 32:19]
      else :
        node _T_4 = eq(UInt<1>("h1"), state) @[insertSort.scala 26:19]
        when _T_4 : @[insertSort.scala 26:19]
          node _state_T_1 = lt(i, asSInt(UInt<32>("ha"))) @[insertSort.scala 35:28]
          node _state_T_2 = mux(_state_T_1, UInt<2>("h2"), UInt<4>("hc")) @[insertSort.scala 35:25]
          state <= _state_T_2 @[insertSort.scala 35:19]
        else :
          node _T_5 = eq(UInt<2>("h2"), state) @[insertSort.scala 26:19]
          when _T_5 : @[insertSort.scala 26:19]
            node _key_T = asUInt(i) @[insertSort.scala 38:36]
            node _key_T_1 = bits(_key_T, 6, 0)
            key <= array[_key_T_1] @[insertSort.scala 38:17]
            state <= UInt<2>("h3") @[insertSort.scala 39:19]
          else :
            node _T_6 = eq(UInt<2>("h3"), state) @[insertSort.scala 26:19]
            when _T_6 : @[insertSort.scala 26:19]
              node _j_T = sub(i, asSInt(UInt<32>("h1"))) @[insertSort.scala 42:20]
              node _j_T_1 = tail(_j_T, 1) @[insertSort.scala 42:20]
              node _j_T_2 = asSInt(_j_T_1) @[insertSort.scala 42:20]
              j <= _j_T_2 @[insertSort.scala 42:15]
              state <= UInt<3>("h4") @[insertSort.scala 43:19]
            else :
              node _T_7 = eq(UInt<3>("h4"), state) @[insertSort.scala 26:19]
              when _T_7 : @[insertSort.scala 26:19]
                node _state_T_3 = gt(j, asSInt(UInt<32>("h0"))) @[insertSort.scala 46:28]
                node _state_T_4 = asUInt(j) @[insertSort.scala 46:60]
                node _state_T_5 = bits(_state_T_4, 6, 0)
                node _state_T_6 = gt(array[_state_T_5], key) @[insertSort.scala 46:64]
                node _state_T_7 = and(_state_T_3, _state_T_6) @[insertSort.scala 46:41]
                node _state_T_8 = mux(_state_T_7, UInt<3>("h5"), UInt<3>("h7")) @[insertSort.scala 46:25]
                state <= _state_T_8 @[insertSort.scala 46:19]
              else :
                node _T_8 = eq(UInt<3>("h5"), state) @[insertSort.scala 26:19]
                when _T_8 : @[insertSort.scala 26:19]
                  node _T_9 = add(j, asSInt(UInt<32>("h1"))) @[insertSort.scala 49:22]
                  node _T_10 = tail(_T_9, 1) @[insertSort.scala 49:22]
                  node _T_11 = asSInt(_T_10) @[insertSort.scala 49:22]
                  node _T_12 = asUInt(_T_11) @[insertSort.scala 49:42]
                  node _T_13 = bits(_T_12, 6, 0)
                  node _array_T = asUInt(j) @[insertSort.scala 49:65]
                  node _array_T_1 = bits(_array_T, 6, 0)
                  array[_T_13] <= array[_array_T_1] @[insertSort.scala 49:46]
                  state <= UInt<3>("h6") @[insertSort.scala 50:19]
                else :
                  node _T_14 = eq(UInt<3>("h6"), state) @[insertSort.scala 26:19]
                  when _T_14 : @[insertSort.scala 26:19]
                    node _j_T_3 = sub(j, asSInt(UInt<32>("h1"))) @[insertSort.scala 53:20]
                    node _j_T_4 = tail(_j_T_3, 1) @[insertSort.scala 53:20]
                    node _j_T_5 = asSInt(_j_T_4) @[insertSort.scala 53:20]
                    j <= _j_T_5 @[insertSort.scala 53:15]
                    state <= UInt<3>("h4") @[insertSort.scala 54:19]
                  else :
                    node _T_15 = eq(UInt<3>("h7"), state) @[insertSort.scala 26:19]
                    when _T_15 : @[insertSort.scala 26:19]
                      node _state_T_9 = eq(j, asSInt(UInt<32>("h0"))) @[insertSort.scala 57:28]
                      node _state_T_10 = asUInt(j) @[insertSort.scala 57:62]
                      node _state_T_11 = bits(_state_T_10, 6, 0)
                      node _state_T_12 = gt(array[_state_T_11], key) @[insertSort.scala 57:66]
                      node _state_T_13 = and(_state_T_9, _state_T_12) @[insertSort.scala 57:43]
                      node _state_T_14 = mux(_state_T_13, UInt<4>("h8"), UInt<4>("ha")) @[insertSort.scala 57:25]
                      state <= _state_T_14 @[insertSort.scala 57:19]
                    else :
                      node _T_16 = eq(UInt<4>("h8"), state) @[insertSort.scala 26:19]
                      when _T_16 : @[insertSort.scala 26:19]
                        node _T_17 = add(j, asSInt(UInt<32>("h1"))) @[insertSort.scala 60:22]
                        node _T_18 = tail(_T_17, 1) @[insertSort.scala 60:22]
                        node _T_19 = asSInt(_T_18) @[insertSort.scala 60:22]
                        node _T_20 = asUInt(_T_19) @[insertSort.scala 60:42]
                        node _T_21 = bits(_T_20, 6, 0)
                        node _array_T_2 = asUInt(j) @[insertSort.scala 60:65]
                        node _array_T_3 = bits(_array_T_2, 6, 0)
                        array[_T_21] <= array[_array_T_3] @[insertSort.scala 60:46]
                        state <= UInt<4>("h9") @[insertSort.scala 61:19]
                      else :
                        node _T_22 = eq(UInt<4>("h9"), state) @[insertSort.scala 26:19]
                        when _T_22 : @[insertSort.scala 26:19]
                          node _T_23 = asUInt(j) @[insertSort.scala 64:29]
                          node _T_24 = bits(_T_23, 6, 0)
                          array[_T_24] <= key @[insertSort.scala 64:33]
                          state <= UInt<4>("hb") @[insertSort.scala 65:19]
                        else :
                          node _T_25 = eq(UInt<4>("ha"), state) @[insertSort.scala 26:19]
                          when _T_25 : @[insertSort.scala 26:19]
                            node _T_26 = add(j, asSInt(UInt<32>("h1"))) @[insertSort.scala 68:22]
                            node _T_27 = tail(_T_26, 1) @[insertSort.scala 68:22]
                            node _T_28 = asSInt(_T_27) @[insertSort.scala 68:22]
                            node _T_29 = asUInt(_T_28) @[insertSort.scala 68:42]
                            node _T_30 = bits(_T_29, 6, 0)
                            array[_T_30] <= key @[insertSort.scala 68:46]
                            state <= UInt<4>("hb") @[insertSort.scala 69:19]
                          else :
                            node _T_31 = eq(UInt<4>("hb"), state) @[insertSort.scala 26:19]
                            when _T_31 : @[insertSort.scala 26:19]
                              node _i_T = add(i, asSInt(UInt<2>("h1"))) @[insertSort.scala 72:21]
                              node _i_T_1 = tail(_i_T, 1) @[insertSort.scala 72:21]
                              node _i_T_2 = asSInt(_i_T_1) @[insertSort.scala 72:21]
                              i <= _i_T_2 @[insertSort.scala 72:15]
                              state <= UInt<1>("h1") @[insertSort.scala 73:19]
                            else :
                              node _T_32 = eq(UInt<4>("hc"), state) @[insertSort.scala 26:19]
                              when _T_32 : @[insertSort.scala 26:19]
                                state <= UInt<4>("hf") @[insertSort.scala 76:19]
    node _io_ready_T = eq(state, UInt<4>("hc")) @[insertSort.scala 80:23]
    io.ready <= _io_ready_T @[insertSort.scala 80:14]

  module AXIWrapperChiselInsertSort :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip S_AXI_AWADDR : UInt<32>, flip S_AXI_AWPROT : UInt<3>, flip S_AXI_AWVALID : UInt<1>, S_AXI_AWREADY : UInt<1>, flip S_AXI_WDATA : SInt<32>, flip S_AXI_WSTRB : UInt<4>, flip S_AXI_WVALID : UInt<1>, S_AXI_WREADY : UInt<1>, S_AXI_BRESP : UInt<2>, S_AXI_BVALID : UInt<1>, flip S_AXI_BREADY : UInt<1>, flip S_AXI_ARADDR : UInt<32>, flip S_AXI_ARPROT : UInt<3>, flip S_AXI_ARVALID : UInt<1>, S_AXI_ARREADY : UInt<1>, S_AXI_RDATA : SInt<32>, S_AXI_RRESP : UInt<2>, S_AXI_RVALID : UInt<1>, flip S_AXI_RREADY : UInt<1>}

    node _lowActiveReset_T = bits(reset, 0, 0) @[AXIWrapperChiselInsertSort.scala 40:33]
    node lowActiveReset = eq(_lowActiveReset_T, UInt<1>("h0")) @[AXIWrapperChiselInsertSort.scala 40:26]
    inst modInsertSort of insertSort @[AXIWrapperChiselInsertSort.scala 44:31]
    modInsertSort.clock <= clock
    modInsertSort.reset <= lowActiveReset
    reg axi_awaddr : UInt<32>, clock with :
      reset => (UInt<1>("h0"), axi_awaddr) @[AXIWrapperChiselInsertSort.scala 47:26]
    reg axi_araddr : UInt<32>, clock with :
      reset => (UInt<1>("h0"), axi_araddr) @[AXIWrapperChiselInsertSort.scala 48:26]
    reg axi_awready : UInt<1>, clock with :
      reset => (UInt<1>("h0"), axi_awready) @[AXIWrapperChiselInsertSort.scala 50:26]
    reg axi_wready : UInt<1>, clock with :
      reset => (UInt<1>("h0"), axi_wready) @[AXIWrapperChiselInsertSort.scala 51:26]
    reg axi_bresp : UInt<2>, clock with :
      reset => (UInt<1>("h0"), axi_bresp) @[AXIWrapperChiselInsertSort.scala 52:26]
    reg axi_bvalid : UInt<1>, clock with :
      reset => (UInt<1>("h0"), axi_bvalid) @[AXIWrapperChiselInsertSort.scala 53:26]
    reg axi_arready : UInt<1>, clock with :
      reset => (UInt<1>("h0"), axi_arready) @[AXIWrapperChiselInsertSort.scala 54:26]
    reg axi_rdata : SInt<32>, clock with :
      reset => (UInt<1>("h0"), axi_rdata) @[AXIWrapperChiselInsertSort.scala 55:26]
    reg axi_rresp : UInt<2>, clock with :
      reset => (UInt<1>("h0"), axi_rresp) @[AXIWrapperChiselInsertSort.scala 56:26]
    reg axi_rvalid : UInt<1>, clock with :
      reset => (UInt<1>("h0"), axi_rvalid) @[AXIWrapperChiselInsertSort.scala 57:26]
    reg io_valid_reg : SInt<32>, clock with :
      reset => (UInt<1>("h0"), io_valid_reg) @[AXIWrapperChiselInsertSort.scala 71:27]
    reg io_ready_reg : UInt<1>, clock with :
      reset => (UInt<1>("h0"), io_ready_reg) @[AXIWrapperChiselInsertSort.scala 72:27]
    wire io_ready : UInt<1> @[AXIWrapperChiselInsertSort.scala 73:28]
    reg io_array : SInt<8>[20], clock with :
      reset => (UInt<1>("h0"), io_array) @[AXIWrapperChiselInsertSort.scala 74:27]
    wire io_array_out : SInt<8>[20] @[AXIWrapperChiselInsertSort.scala 75:28]
    wire slv_reg_rden : UInt<1> @[AXIWrapperChiselInsertSort.scala 76:28]
    wire slv_reg_wren : UInt<1> @[AXIWrapperChiselInsertSort.scala 77:28]
    reg reg_data_out : SInt<32>, clock with :
      reset => (UInt<1>("h0"), reg_data_out) @[AXIWrapperChiselInsertSort.scala 78:27]
    reg aw_en : UInt<1>, clock with :
      reset => (UInt<1>("h0"), aw_en) @[AXIWrapperChiselInsertSort.scala 79:27]
    io.S_AXI_AWREADY <= axi_awready @[AXIWrapperChiselInsertSort.scala 82:22]
    io.S_AXI_WREADY <= axi_wready @[AXIWrapperChiselInsertSort.scala 83:22]
    io.S_AXI_BRESP <= axi_bresp @[AXIWrapperChiselInsertSort.scala 84:22]
    io.S_AXI_BVALID <= axi_bvalid @[AXIWrapperChiselInsertSort.scala 85:26]
    io.S_AXI_ARREADY <= axi_arready @[AXIWrapperChiselInsertSort.scala 86:22]
    io.S_AXI_RDATA <= axi_rdata @[AXIWrapperChiselInsertSort.scala 87:22]
    io.S_AXI_RRESP <= axi_rresp @[AXIWrapperChiselInsertSort.scala 88:22]
    io.S_AXI_RVALID <= axi_rvalid @[AXIWrapperChiselInsertSort.scala 89:22]
    node _T = bits(lowActiveReset, 0, 0) @[AXIWrapperChiselInsertSort.scala 95:25]
    when _T : @[AXIWrapperChiselInsertSort.scala 95:33]
      axi_awready <= UInt<1>("h0") @[AXIWrapperChiselInsertSort.scala 96:21]
      aw_en <= UInt<1>("h1") @[AXIWrapperChiselInsertSort.scala 97:21]
    else :
      node _T_1 = not(axi_awready) @[AXIWrapperChiselInsertSort.scala 99:14]
      node _T_2 = and(_T_1, io.S_AXI_AWVALID) @[AXIWrapperChiselInsertSort.scala 99:27]
      node _T_3 = and(_T_2, io.S_AXI_WVALID) @[AXIWrapperChiselInsertSort.scala 99:47]
      node _T_4 = and(_T_3, aw_en) @[AXIWrapperChiselInsertSort.scala 99:66]
      when _T_4 : @[AXIWrapperChiselInsertSort.scala 99:76]
        axi_awready <= UInt<1>("h1") @[AXIWrapperChiselInsertSort.scala 104:25]
        aw_en <= UInt<1>("h0") @[AXIWrapperChiselInsertSort.scala 105:25]
      else :
        node _T_5 = and(io.S_AXI_BREADY, axi_bvalid) @[AXIWrapperChiselInsertSort.scala 106:37]
        when _T_5 : @[AXIWrapperChiselInsertSort.scala 106:52]
          axi_awready <= UInt<1>("h0") @[AXIWrapperChiselInsertSort.scala 109:25]
          aw_en <= UInt<1>("h1") @[AXIWrapperChiselInsertSort.scala 110:25]
        else :
          axi_awready <= UInt<1>("h0") @[AXIWrapperChiselInsertSort.scala 112:26]
    node _T_6 = bits(lowActiveReset, 0, 0) @[AXIWrapperChiselInsertSort.scala 119:25]
    when _T_6 : @[AXIWrapperChiselInsertSort.scala 119:33]
      axi_awaddr <= UInt<1>("h0") @[AXIWrapperChiselInsertSort.scala 120:20]
    else :
      node _T_7 = not(axi_awready) @[AXIWrapperChiselInsertSort.scala 122:14]
      node _T_8 = and(_T_7, io.S_AXI_AWVALID) @[AXIWrapperChiselInsertSort.scala 122:27]
      node _T_9 = and(_T_8, io.S_AXI_WVALID) @[AXIWrapperChiselInsertSort.scala 122:47]
      node _T_10 = and(_T_9, aw_en) @[AXIWrapperChiselInsertSort.scala 122:66]
      when _T_10 : @[AXIWrapperChiselInsertSort.scala 122:76]
        axi_awaddr <= io.S_AXI_AWADDR @[AXIWrapperChiselInsertSort.scala 123:24]
    node _T_11 = bits(lowActiveReset, 0, 0) @[AXIWrapperChiselInsertSort.scala 131:25]
    when _T_11 : @[AXIWrapperChiselInsertSort.scala 131:33]
      axi_wready <= UInt<1>("h0") @[AXIWrapperChiselInsertSort.scala 132:20]
    else :
      node _T_12 = not(axi_wready) @[AXIWrapperChiselInsertSort.scala 134:14]
      node _T_13 = and(_T_12, io.S_AXI_WVALID) @[AXIWrapperChiselInsertSort.scala 134:26]
      node _T_14 = and(_T_13, io.S_AXI_AWVALID) @[AXIWrapperChiselInsertSort.scala 134:45]
      node _T_15 = and(_T_14, aw_en) @[AXIWrapperChiselInsertSort.scala 134:65]
      when _T_15 : @[AXIWrapperChiselInsertSort.scala 134:75]
        axi_wready <= UInt<1>("h1") @[AXIWrapperChiselInsertSort.scala 139:24]
      else :
        axi_wready <= UInt<1>("h0") @[AXIWrapperChiselInsertSort.scala 141:24]
    node _slv_reg_wren_T = and(axi_wready, io.S_AXI_WVALID) @[AXIWrapperChiselInsertSort.scala 152:32]
    node _slv_reg_wren_T_1 = and(_slv_reg_wren_T, axi_awready) @[AXIWrapperChiselInsertSort.scala 152:51]
    node _slv_reg_wren_T_2 = and(_slv_reg_wren_T_1, io.S_AXI_AWVALID) @[AXIWrapperChiselInsertSort.scala 152:66]
    slv_reg_wren <= _slv_reg_wren_T_2 @[AXIWrapperChiselInsertSort.scala 152:18]
    node _T_16 = bits(lowActiveReset, 0, 0) @[AXIWrapperChiselInsertSort.scala 154:25]
    when _T_16 : @[AXIWrapperChiselInsertSort.scala 154:33]
      io_valid_reg <= asSInt(UInt<1>("h0")) @[AXIWrapperChiselInsertSort.scala 155:22]
    else :
      node _T_17 = bits(axi_awaddr, 9, 2) @[AXIWrapperChiselInsertSort.scala 157:24]
      node _T_18 = eq(_T_17, UInt<6>("h28")) @[AXIWrapperChiselInsertSort.scala 157:65]
      when _T_18 : @[AXIWrapperChiselInsertSort.scala 157:77]
        io_valid_reg <= io.S_AXI_WDATA @[AXIWrapperChiselInsertSort.scala 158:26]
      else :
        when slv_reg_wren : @[AXIWrapperChiselInsertSort.scala 160:32]
          node _T_19 = bits(axi_awaddr, 9, 2) @[AXIWrapperChiselInsertSort.scala 161:36]
          node _T_20 = bits(_T_19, 4, 0)
          io_array[_T_20] <= io.S_AXI_WDATA @[AXIWrapperChiselInsertSort.scala 161:78]
    node _T_21 = bits(lowActiveReset, 0, 0) @[AXIWrapperChiselInsertSort.scala 171:25]
    when _T_21 : @[AXIWrapperChiselInsertSort.scala 171:33]
      axi_bvalid <= UInt<1>("h0") @[AXIWrapperChiselInsertSort.scala 172:20]
      axi_bresp <= UInt<1>("h0") @[AXIWrapperChiselInsertSort.scala 173:20]
    else :
      node _T_22 = and(axi_awready, io.S_AXI_AWVALID) @[AXIWrapperChiselInsertSort.scala 175:26]
      node _T_23 = not(axi_bvalid) @[AXIWrapperChiselInsertSort.scala 175:49]
      node _T_24 = and(_T_22, _T_23) @[AXIWrapperChiselInsertSort.scala 175:46]
      node _T_25 = and(_T_24, axi_wready) @[AXIWrapperChiselInsertSort.scala 175:61]
      node _T_26 = and(_T_25, io.S_AXI_WVALID) @[AXIWrapperChiselInsertSort.scala 175:75]
      when _T_26 : @[AXIWrapperChiselInsertSort.scala 175:95]
        axi_bvalid <= UInt<1>("h1") @[AXIWrapperChiselInsertSort.scala 176:24]
        axi_bresp <= UInt<1>("h0") @[AXIWrapperChiselInsertSort.scala 177:24]
      else :
        node _T_27 = and(io.S_AXI_BREADY, axi_bvalid) @[AXIWrapperChiselInsertSort.scala 179:34]
        when _T_27 : @[AXIWrapperChiselInsertSort.scala 179:49]
          axi_bvalid <= UInt<1>("h0") @[AXIWrapperChiselInsertSort.scala 180:28]
    node _T_28 = bits(lowActiveReset, 0, 0) @[AXIWrapperChiselInsertSort.scala 191:25]
    when _T_28 : @[AXIWrapperChiselInsertSort.scala 191:33]
      axi_arready <= UInt<1>("h0") @[AXIWrapperChiselInsertSort.scala 192:21]
      axi_araddr <= UInt<1>("h0") @[AXIWrapperChiselInsertSort.scala 193:21]
    else :
      node _T_29 = not(axi_arready) @[AXIWrapperChiselInsertSort.scala 195:14]
      node _T_30 = and(_T_29, io.S_AXI_ARVALID) @[AXIWrapperChiselInsertSort.scala 195:27]
      when _T_30 : @[AXIWrapperChiselInsertSort.scala 195:48]
        axi_arready <= UInt<1>("h1") @[AXIWrapperChiselInsertSort.scala 197:25]
        axi_araddr <= io.S_AXI_ARADDR @[AXIWrapperChiselInsertSort.scala 198:25]
      else :
        axi_arready <= UInt<1>("h0") @[AXIWrapperChiselInsertSort.scala 200:25]
    node _T_31 = bits(lowActiveReset, 0, 0) @[AXIWrapperChiselInsertSort.scala 212:25]
    when _T_31 : @[AXIWrapperChiselInsertSort.scala 212:33]
      axi_rvalid <= UInt<1>("h0") @[AXIWrapperChiselInsertSort.scala 213:20]
      axi_rresp <= UInt<1>("h0") @[AXIWrapperChiselInsertSort.scala 214:20]
    else :
      node _T_32 = and(axi_arready, io.S_AXI_ARVALID) @[AXIWrapperChiselInsertSort.scala 216:26]
      node _T_33 = not(axi_rvalid) @[AXIWrapperChiselInsertSort.scala 216:49]
      node _T_34 = and(_T_32, _T_33) @[AXIWrapperChiselInsertSort.scala 216:46]
      when _T_34 : @[AXIWrapperChiselInsertSort.scala 216:62]
        axi_rvalid <= UInt<1>("h1") @[AXIWrapperChiselInsertSort.scala 217:24]
        axi_rresp <= UInt<1>("h0") @[AXIWrapperChiselInsertSort.scala 218:24]
      else :
        node _T_35 = and(axi_rvalid, io.S_AXI_RREADY) @[AXIWrapperChiselInsertSort.scala 219:32]
        when _T_35 : @[AXIWrapperChiselInsertSort.scala 219:52]
          axi_rvalid <= UInt<1>("h0") @[AXIWrapperChiselInsertSort.scala 220:24]
    modInsertSort.clock <= clock @[AXIWrapperChiselInsertSort.scala 225:25]
    modInsertSort.reset <= lowActiveReset @[AXIWrapperChiselInsertSort.scala 226:25]
    node _modInsertSort_io_valid_T = bits(io_valid_reg, 0, 0) @[AXIWrapperChiselInsertSort.scala 227:43]
    modInsertSort.io.valid <= _modInsertSort_io_valid_T @[AXIWrapperChiselInsertSort.scala 227:28]
    io_ready <= modInsertSort.io.ready @[AXIWrapperChiselInsertSort.scala 228:14]
    modInsertSort.io.array[0] <= io_array[0] @[AXIWrapperChiselInsertSort.scala 231:39]
    modInsertSort.io.array[1] <= io_array[1] @[AXIWrapperChiselInsertSort.scala 231:39]
    modInsertSort.io.array[2] <= io_array[2] @[AXIWrapperChiselInsertSort.scala 231:39]
    modInsertSort.io.array[3] <= io_array[3] @[AXIWrapperChiselInsertSort.scala 231:39]
    modInsertSort.io.array[4] <= io_array[4] @[AXIWrapperChiselInsertSort.scala 231:39]
    modInsertSort.io.array[5] <= io_array[5] @[AXIWrapperChiselInsertSort.scala 231:39]
    modInsertSort.io.array[6] <= io_array[6] @[AXIWrapperChiselInsertSort.scala 231:39]
    modInsertSort.io.array[7] <= io_array[7] @[AXIWrapperChiselInsertSort.scala 231:39]
    modInsertSort.io.array[8] <= io_array[8] @[AXIWrapperChiselInsertSort.scala 231:39]
    modInsertSort.io.array[9] <= io_array[9] @[AXIWrapperChiselInsertSort.scala 231:39]
    modInsertSort.io.array[10] <= io_array[10] @[AXIWrapperChiselInsertSort.scala 231:39]
    modInsertSort.io.array[11] <= io_array[11] @[AXIWrapperChiselInsertSort.scala 231:39]
    modInsertSort.io.array[12] <= io_array[12] @[AXIWrapperChiselInsertSort.scala 231:39]
    modInsertSort.io.array[13] <= io_array[13] @[AXIWrapperChiselInsertSort.scala 231:39]
    modInsertSort.io.array[14] <= io_array[14] @[AXIWrapperChiselInsertSort.scala 231:39]
    modInsertSort.io.array[15] <= io_array[15] @[AXIWrapperChiselInsertSort.scala 231:39]
    modInsertSort.io.array[16] <= io_array[16] @[AXIWrapperChiselInsertSort.scala 231:39]
    modInsertSort.io.array[17] <= io_array[17] @[AXIWrapperChiselInsertSort.scala 231:39]
    modInsertSort.io.array[18] <= io_array[18] @[AXIWrapperChiselInsertSort.scala 231:39]
    modInsertSort.io.array[19] <= io_array[19] @[AXIWrapperChiselInsertSort.scala 231:39]
    modInsertSort.io.array[20] <= asSInt(UInt<1>("h0")) @[AXIWrapperChiselInsertSort.scala 233:39]
    modInsertSort.io.array[21] <= asSInt(UInt<1>("h0")) @[AXIWrapperChiselInsertSort.scala 233:39]
    modInsertSort.io.array[22] <= asSInt(UInt<1>("h0")) @[AXIWrapperChiselInsertSort.scala 233:39]
    modInsertSort.io.array[23] <= asSInt(UInt<1>("h0")) @[AXIWrapperChiselInsertSort.scala 233:39]
    modInsertSort.io.array[24] <= asSInt(UInt<1>("h0")) @[AXIWrapperChiselInsertSort.scala 233:39]
    modInsertSort.io.array[25] <= asSInt(UInt<1>("h0")) @[AXIWrapperChiselInsertSort.scala 233:39]
    modInsertSort.io.array[26] <= asSInt(UInt<1>("h0")) @[AXIWrapperChiselInsertSort.scala 233:39]
    modInsertSort.io.array[27] <= asSInt(UInt<1>("h0")) @[AXIWrapperChiselInsertSort.scala 233:39]
    modInsertSort.io.array[28] <= asSInt(UInt<1>("h0")) @[AXIWrapperChiselInsertSort.scala 233:39]
    modInsertSort.io.array[29] <= asSInt(UInt<1>("h0")) @[AXIWrapperChiselInsertSort.scala 233:39]
    modInsertSort.io.array[30] <= asSInt(UInt<1>("h0")) @[AXIWrapperChiselInsertSort.scala 233:39]
    modInsertSort.io.array[31] <= asSInt(UInt<1>("h0")) @[AXIWrapperChiselInsertSort.scala 233:39]
    modInsertSort.io.array[32] <= asSInt(UInt<1>("h0")) @[AXIWrapperChiselInsertSort.scala 233:39]
    modInsertSort.io.array[33] <= asSInt(UInt<1>("h0")) @[AXIWrapperChiselInsertSort.scala 233:39]
    modInsertSort.io.array[34] <= asSInt(UInt<1>("h0")) @[AXIWrapperChiselInsertSort.scala 233:39]
    modInsertSort.io.array[35] <= asSInt(UInt<1>("h0")) @[AXIWrapperChiselInsertSort.scala 233:39]
    modInsertSort.io.array[36] <= asSInt(UInt<1>("h0")) @[AXIWrapperChiselInsertSort.scala 233:39]
    modInsertSort.io.array[37] <= asSInt(UInt<1>("h0")) @[AXIWrapperChiselInsertSort.scala 233:39]
    modInsertSort.io.array[38] <= asSInt(UInt<1>("h0")) @[AXIWrapperChiselInsertSort.scala 233:39]
    modInsertSort.io.array[39] <= asSInt(UInt<1>("h0")) @[AXIWrapperChiselInsertSort.scala 233:39]
    modInsertSort.io.array[40] <= asSInt(UInt<1>("h0")) @[AXIWrapperChiselInsertSort.scala 233:39]
    modInsertSort.io.array[41] <= asSInt(UInt<1>("h0")) @[AXIWrapperChiselInsertSort.scala 233:39]
    modInsertSort.io.array[42] <= asSInt(UInt<1>("h0")) @[AXIWrapperChiselInsertSort.scala 233:39]
    modInsertSort.io.array[43] <= asSInt(UInt<1>("h0")) @[AXIWrapperChiselInsertSort.scala 233:39]
    modInsertSort.io.array[44] <= asSInt(UInt<1>("h0")) @[AXIWrapperChiselInsertSort.scala 233:39]
    modInsertSort.io.array[45] <= asSInt(UInt<1>("h0")) @[AXIWrapperChiselInsertSort.scala 233:39]
    modInsertSort.io.array[46] <= asSInt(UInt<1>("h0")) @[AXIWrapperChiselInsertSort.scala 233:39]
    modInsertSort.io.array[47] <= asSInt(UInt<1>("h0")) @[AXIWrapperChiselInsertSort.scala 233:39]
    modInsertSort.io.array[48] <= asSInt(UInt<1>("h0")) @[AXIWrapperChiselInsertSort.scala 233:39]
    modInsertSort.io.array[49] <= asSInt(UInt<1>("h0")) @[AXIWrapperChiselInsertSort.scala 233:39]
    modInsertSort.io.array[50] <= asSInt(UInt<1>("h0")) @[AXIWrapperChiselInsertSort.scala 233:39]
    modInsertSort.io.array[51] <= asSInt(UInt<1>("h0")) @[AXIWrapperChiselInsertSort.scala 233:39]
    modInsertSort.io.array[52] <= asSInt(UInt<1>("h0")) @[AXIWrapperChiselInsertSort.scala 233:39]
    modInsertSort.io.array[53] <= asSInt(UInt<1>("h0")) @[AXIWrapperChiselInsertSort.scala 233:39]
    modInsertSort.io.array[54] <= asSInt(UInt<1>("h0")) @[AXIWrapperChiselInsertSort.scala 233:39]
    modInsertSort.io.array[55] <= asSInt(UInt<1>("h0")) @[AXIWrapperChiselInsertSort.scala 233:39]
    modInsertSort.io.array[56] <= asSInt(UInt<1>("h0")) @[AXIWrapperChiselInsertSort.scala 233:39]
    modInsertSort.io.array[57] <= asSInt(UInt<1>("h0")) @[AXIWrapperChiselInsertSort.scala 233:39]
    modInsertSort.io.array[58] <= asSInt(UInt<1>("h0")) @[AXIWrapperChiselInsertSort.scala 233:39]
    modInsertSort.io.array[59] <= asSInt(UInt<1>("h0")) @[AXIWrapperChiselInsertSort.scala 233:39]
    modInsertSort.io.array[60] <= asSInt(UInt<1>("h0")) @[AXIWrapperChiselInsertSort.scala 233:39]
    modInsertSort.io.array[61] <= asSInt(UInt<1>("h0")) @[AXIWrapperChiselInsertSort.scala 233:39]
    modInsertSort.io.array[62] <= asSInt(UInt<1>("h0")) @[AXIWrapperChiselInsertSort.scala 233:39]
    modInsertSort.io.array[63] <= asSInt(UInt<1>("h0")) @[AXIWrapperChiselInsertSort.scala 233:39]
    modInsertSort.io.array[64] <= asSInt(UInt<1>("h0")) @[AXIWrapperChiselInsertSort.scala 233:39]
    modInsertSort.io.array[65] <= asSInt(UInt<1>("h0")) @[AXIWrapperChiselInsertSort.scala 233:39]
    modInsertSort.io.array[66] <= asSInt(UInt<1>("h0")) @[AXIWrapperChiselInsertSort.scala 233:39]
    modInsertSort.io.array[67] <= asSInt(UInt<1>("h0")) @[AXIWrapperChiselInsertSort.scala 233:39]
    modInsertSort.io.array[68] <= asSInt(UInt<1>("h0")) @[AXIWrapperChiselInsertSort.scala 233:39]
    modInsertSort.io.array[69] <= asSInt(UInt<1>("h0")) @[AXIWrapperChiselInsertSort.scala 233:39]
    modInsertSort.io.array[70] <= asSInt(UInt<1>("h0")) @[AXIWrapperChiselInsertSort.scala 233:39]
    modInsertSort.io.array[71] <= asSInt(UInt<1>("h0")) @[AXIWrapperChiselInsertSort.scala 233:39]
    modInsertSort.io.array[72] <= asSInt(UInt<1>("h0")) @[AXIWrapperChiselInsertSort.scala 233:39]
    modInsertSort.io.array[73] <= asSInt(UInt<1>("h0")) @[AXIWrapperChiselInsertSort.scala 233:39]
    modInsertSort.io.array[74] <= asSInt(UInt<1>("h0")) @[AXIWrapperChiselInsertSort.scala 233:39]
    modInsertSort.io.array[75] <= asSInt(UInt<1>("h0")) @[AXIWrapperChiselInsertSort.scala 233:39]
    modInsertSort.io.array[76] <= asSInt(UInt<1>("h0")) @[AXIWrapperChiselInsertSort.scala 233:39]
    modInsertSort.io.array[77] <= asSInt(UInt<1>("h0")) @[AXIWrapperChiselInsertSort.scala 233:39]
    modInsertSort.io.array[78] <= asSInt(UInt<1>("h0")) @[AXIWrapperChiselInsertSort.scala 233:39]
    modInsertSort.io.array[79] <= asSInt(UInt<1>("h0")) @[AXIWrapperChiselInsertSort.scala 233:39]
    io_array_out[0] <= modInsertSort.io.array_out[0] @[AXIWrapperChiselInsertSort.scala 236:25]
    io_array_out[1] <= modInsertSort.io.array_out[1] @[AXIWrapperChiselInsertSort.scala 236:25]
    io_array_out[2] <= modInsertSort.io.array_out[2] @[AXIWrapperChiselInsertSort.scala 236:25]
    io_array_out[3] <= modInsertSort.io.array_out[3] @[AXIWrapperChiselInsertSort.scala 236:25]
    io_array_out[4] <= modInsertSort.io.array_out[4] @[AXIWrapperChiselInsertSort.scala 236:25]
    io_array_out[5] <= modInsertSort.io.array_out[5] @[AXIWrapperChiselInsertSort.scala 236:25]
    io_array_out[6] <= modInsertSort.io.array_out[6] @[AXIWrapperChiselInsertSort.scala 236:25]
    io_array_out[7] <= modInsertSort.io.array_out[7] @[AXIWrapperChiselInsertSort.scala 236:25]
    io_array_out[8] <= modInsertSort.io.array_out[8] @[AXIWrapperChiselInsertSort.scala 236:25]
    io_array_out[9] <= modInsertSort.io.array_out[9] @[AXIWrapperChiselInsertSort.scala 236:25]
    io_array_out[10] <= modInsertSort.io.array_out[10] @[AXIWrapperChiselInsertSort.scala 236:25]
    io_array_out[11] <= modInsertSort.io.array_out[11] @[AXIWrapperChiselInsertSort.scala 236:25]
    io_array_out[12] <= modInsertSort.io.array_out[12] @[AXIWrapperChiselInsertSort.scala 236:25]
    io_array_out[13] <= modInsertSort.io.array_out[13] @[AXIWrapperChiselInsertSort.scala 236:25]
    io_array_out[14] <= modInsertSort.io.array_out[14] @[AXIWrapperChiselInsertSort.scala 236:25]
    io_array_out[15] <= modInsertSort.io.array_out[15] @[AXIWrapperChiselInsertSort.scala 236:25]
    io_array_out[16] <= modInsertSort.io.array_out[16] @[AXIWrapperChiselInsertSort.scala 236:25]
    io_array_out[17] <= modInsertSort.io.array_out[17] @[AXIWrapperChiselInsertSort.scala 236:25]
    io_array_out[18] <= modInsertSort.io.array_out[18] @[AXIWrapperChiselInsertSort.scala 236:25]
    io_array_out[19] <= modInsertSort.io.array_out[19] @[AXIWrapperChiselInsertSort.scala 236:25]
    node _T_36 = bits(lowActiveReset, 0, 0) @[AXIWrapperChiselInsertSort.scala 239:25]
    when _T_36 : @[AXIWrapperChiselInsertSort.scala 239:33]
      io_ready_reg <= UInt<1>("h0") @[AXIWrapperChiselInsertSort.scala 240:22]
    else :
      node _io_ready_reg_T = mux(io_ready, UInt<1>("h1"), io_ready_reg) @[AXIWrapperChiselInsertSort.scala 242:28]
      io_ready_reg <= _io_ready_reg_T @[AXIWrapperChiselInsertSort.scala 242:22]
    node _slv_reg_rden_T = and(axi_arready, io.S_AXI_ARVALID) @[AXIWrapperChiselInsertSort.scala 248:33]
    node _slv_reg_rden_T_1 = not(axi_rvalid) @[AXIWrapperChiselInsertSort.scala 248:54]
    node _slv_reg_rden_T_2 = and(_slv_reg_rden_T, _slv_reg_rden_T_1) @[AXIWrapperChiselInsertSort.scala 248:52]
    slv_reg_rden <= _slv_reg_rden_T_2 @[AXIWrapperChiselInsertSort.scala 248:18]
    node readAddr = bits(axi_araddr, 9, 2) @[AXIWrapperChiselInsertSort.scala 250:30]
    node _T_37 = leq(UInt<1>("h0"), readAddr) @[AXIWrapperChiselInsertSort.scala 251:16]
    node _T_38 = leq(readAddr, UInt<5>("h13")) @[AXIWrapperChiselInsertSort.scala 251:40]
    node _T_39 = and(_T_37, _T_38) @[AXIWrapperChiselInsertSort.scala 251:28]
    when _T_39 : @[AXIWrapperChiselInsertSort.scala 251:51]
      node _reg_data_out_T = bits(readAddr, 4, 0)
      reg_data_out <= io_array[_reg_data_out_T] @[AXIWrapperChiselInsertSort.scala 252:22]
    else :
      node _T_40 = leq(UInt<5>("h14"), readAddr) @[AXIWrapperChiselInsertSort.scala 253:24]
      node _T_41 = leq(readAddr, UInt<6>("h27")) @[AXIWrapperChiselInsertSort.scala 253:48]
      node _T_42 = and(_T_40, _T_41) @[AXIWrapperChiselInsertSort.scala 253:36]
      when _T_42 : @[AXIWrapperChiselInsertSort.scala 253:59]
        node _reg_data_out_T_1 = sub(readAddr, UInt<5>("h14")) @[AXIWrapperChiselInsertSort.scala 254:47]
        node _reg_data_out_T_2 = tail(_reg_data_out_T_1, 1) @[AXIWrapperChiselInsertSort.scala 254:47]
        node _reg_data_out_T_3 = bits(_reg_data_out_T_2, 4, 0)
        reg_data_out <= io_array_out[_reg_data_out_T_3] @[AXIWrapperChiselInsertSort.scala 254:22]
      else :
        node _T_43 = eq(UInt<6>("h28"), readAddr) @[AXIWrapperChiselInsertSort.scala 255:24]
        when _T_43 : @[AXIWrapperChiselInsertSort.scala 255:38]
          reg_data_out <= io_valid_reg @[AXIWrapperChiselInsertSort.scala 256:22]
        else :
          node _T_44 = eq(UInt<6>("h29"), readAddr) @[AXIWrapperChiselInsertSort.scala 257:24]
          when _T_44 : @[AXIWrapperChiselInsertSort.scala 257:38]
            node _reg_data_out_T_4 = cat(UInt<1>("h0"), io_ready) @[Cat.scala 33:92]
            node _reg_data_out_T_5 = asSInt(_reg_data_out_T_4) @[AXIWrapperChiselInsertSort.scala 258:44]
            reg_data_out <= _reg_data_out_T_5 @[AXIWrapperChiselInsertSort.scala 258:22]
          else :
            reg_data_out <= asSInt(UInt<1>("h0")) @[AXIWrapperChiselInsertSort.scala 260:22]
    node _T_45 = bits(lowActiveReset, 0, 0) @[AXIWrapperChiselInsertSort.scala 264:25]
    when _T_45 : @[AXIWrapperChiselInsertSort.scala 264:33]
      axi_rdata <= asSInt(UInt<1>("h0")) @[AXIWrapperChiselInsertSort.scala 265:19]
    else :
      when slv_reg_rden : @[AXIWrapperChiselInsertSort.scala 270:28]
        axi_rdata <= reg_data_out @[AXIWrapperChiselInsertSort.scala 271:23]


